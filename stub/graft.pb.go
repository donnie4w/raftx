// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: graft.proto

package stub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnapshotBat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRxId     int64  `protobuf:"varint,1,opt,name=from_rx_id,json=fromRxId,proto3" json:"from_rx_id,omitempty"`
	ToRxId       int64  `protobuf:"varint,2,opt,name=to_rx_id,json=toRxId,proto3" json:"to_rx_id,omitempty"`
	FileIndex    string `protobuf:"bytes,3,opt,name=file_index,json=fileIndex,proto3" json:"file_index,omitempty"`
	CreationTime int64  `protobuf:"varint,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Size         int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SnapshotBat) Reset() {
	*x = SnapshotBat{}
	mi := &file_graft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotBat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotBat) ProtoMessage() {}

func (x *SnapshotBat) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotBat.ProtoReflect.Descriptor instead.
func (*SnapshotBat) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{0}
}

func (x *SnapshotBat) GetFromRxId() int64 {
	if x != nil {
		return x.FromRxId
	}
	return 0
}

func (x *SnapshotBat) GetToRxId() int64 {
	if x != nil {
		return x.ToRxId
	}
	return 0
}

func (x *SnapshotBat) GetFileIndex() string {
	if x != nil {
		return x.FileIndex
	}
	return ""
}

func (x *SnapshotBat) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *SnapshotBat) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LogEntryBat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	LogIndex int64  `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Term     int64  `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	RxId     int64  `protobuf:"varint,4,opt,name=rx_id,json=rxId,proto3" json:"rx_id,omitempty"`
	NodeId   int64  `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *LogEntryBat) Reset() {
	*x = LogEntryBat{}
	mi := &file_graft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntryBat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntryBat) ProtoMessage() {}

func (x *LogEntryBat) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntryBat.ProtoReflect.Descriptor instead.
func (*LogEntryBat) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{1}
}

func (x *LogEntryBat) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *LogEntryBat) GetLogIndex() int64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *LogEntryBat) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntryBat) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

func (x *LogEntryBat) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type RxBat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIndex int64     `protobuf:"varint,1,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Term     int64     `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Mc       *MvccCell `protobuf:"bytes,3,opt,name=mc,proto3" json:"mc,omitempty"`
}

func (x *RxBat) Reset() {
	*x = RxBat{}
	mi := &file_graft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RxBat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxBat) ProtoMessage() {}

func (x *RxBat) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxBat.ProtoReflect.Descriptor instead.
func (*RxBat) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{2}
}

func (x *RxBat) GetLogIndex() int64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *RxBat) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RxBat) GetMc() *MvccCell {
	if x != nil {
		return x.Mc
	}
	return nil
}

type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term      int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId  int64 `protobuf:"varint,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	LeaseTime int64 `protobuf:"varint,3,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
	Leadercn  bool  `protobuf:"varint,4,opt,name=leadercn,proto3" json:"leadercn,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	mi := &file_graft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{3}
}

func (x *HeartBeat) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *HeartBeat) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *HeartBeat) GetLeaseTime() int64 {
	if x != nil {
		return x.LeaseTime
	}
	return 0
}

func (x *HeartBeat) GetLeadercn() bool {
	if x != nil {
		return x.Leadercn
	}
	return false
}

type HeartBeatAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term  int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Reply int32 `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *HeartBeatAck) Reset() {
	*x = HeartBeatAck{}
	mi := &file_graft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartBeatAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatAck) ProtoMessage() {}

func (x *HeartBeatAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatAck.ProtoReflect.Descriptor instead.
func (*HeartBeatAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{4}
}

func (x *HeartBeatAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *HeartBeatAck) GetReply() int32 {
	if x != nil {
		return x.Reply
	}
	return 0
}

type ReqLogEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxIdList []int64 `protobuf:"varint,3,rep,packed,name=rx_id_list,json=rxIdList,proto3" json:"rx_id_list,omitempty"`
}

func (x *ReqLogEntries) Reset() {
	*x = ReqLogEntries{}
	mi := &file_graft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqLogEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLogEntries) ProtoMessage() {}

func (x *ReqLogEntries) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLogEntries.ProtoReflect.Descriptor instead.
func (*ReqLogEntries) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{5}
}

func (x *ReqLogEntries) GetRxIdList() []int64 {
	if x != nil {
		return x.RxIdList
	}
	return nil
}

type ReqLogEntriesAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*LogEntryBat `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Term    int64          `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	NodeId  int64          `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ReqLogEntriesAck) Reset() {
	*x = ReqLogEntriesAck{}
	mi := &file_graft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqLogEntriesAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLogEntriesAck) ProtoMessage() {}

func (x *ReqLogEntriesAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLogEntriesAck.ProtoReflect.Descriptor instead.
func (*ReqLogEntriesAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{6}
}

func (x *ReqLogEntriesAck) GetEntries() []*LogEntryBat {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ReqLogEntriesAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *ReqLogEntriesAck) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type AppendEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enstries *LogEntryBat `protobuf:"bytes,1,opt,name=enstries,proto3" json:"enstries,omitempty"`
	Term     int64        `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	NodeId   int64        `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *AppendEntries) Reset() {
	*x = AppendEntries{}
	mi := &file_graft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries) ProtoMessage() {}

func (x *AppendEntries) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries.ProtoReflect.Descriptor instead.
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{7}
}

func (x *AppendEntries) GetEnstries() *LogEntryBat {
	if x != nil {
		return x.Enstries
	}
	return nil
}

func (x *AppendEntries) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntries) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type AppendEntriesAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term    int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AppendEntriesAck) Reset() {
	*x = AppendEntriesAck{}
	mi := &file_graft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesAck) ProtoMessage() {}

func (x *AppendEntriesAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesAck.ProtoReflect.Descriptor instead.
func (*AppendEntriesAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{8}
}

func (x *AppendEntriesAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term     int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId int64 `protobuf:"varint,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	LogIndex int64 `protobuf:"varint,3,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	RxId     int64 `protobuf:"varint,4,opt,name=rx_id,json=rxId,proto3" json:"rx_id,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_graft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{9}
}

func (x *Commit) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Commit) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *Commit) GetLogIndex() int64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Commit) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

type CommitAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Term    int64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Success bool  `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CommitAck) Reset() {
	*x = CommitAck{}
	mi := &file_graft_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAck) ProtoMessage() {}

func (x *CommitAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAck.ProtoReflect.Descriptor instead.
func (*CommitAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{10}
}

func (x *CommitAck) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CommitAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CommitAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RollBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term   int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	NodeId int64 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RxId   int64 `protobuf:"varint,3,opt,name=rx_id,json=rxId,proto3" json:"rx_id,omitempty"`
	LogId  int64 `protobuf:"varint,4,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
}

func (x *RollBack) Reset() {
	*x = RollBack{}
	mi := &file_graft_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBack) ProtoMessage() {}

func (x *RollBack) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBack.ProtoReflect.Descriptor instead.
func (*RollBack) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{11}
}

func (x *RollBack) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RollBack) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RollBack) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

func (x *RollBack) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

type RollBackAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Term    int64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Success bool  `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RollBackAck) Reset() {
	*x = RollBackAck{}
	mi := &file_graft_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollBackAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBackAck) ProtoMessage() {}

func (x *RollBackAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBackAck.ProtoReflect.Descriptor instead.
func (*RollBackAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{12}
}

func (x *RollBackAck) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RollBackAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RollBackAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ToRollack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RxId   int64  `protobuf:"varint,2,opt,name=rx_id,json=rxId,proto3" json:"rx_id,omitempty"`
	Addr   string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	TrId   int64  `protobuf:"varint,4,opt,name=trId,proto3" json:"trId,omitempty"`
	Prev   int64  `protobuf:"varint,5,opt,name=prev,proto3" json:"prev,omitempty"`
	Next   int64  `protobuf:"varint,6,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ToRollack) Reset() {
	*x = ToRollack{}
	mi := &file_graft_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToRollack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToRollack) ProtoMessage() {}

func (x *ToRollack) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToRollack.ProtoReflect.Descriptor instead.
func (*ToRollack) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{13}
}

func (x *ToRollack) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ToRollack) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

func (x *ToRollack) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ToRollack) GetTrId() int64 {
	if x != nil {
		return x.TrId
	}
	return 0
}

func (x *ToRollack) GetPrev() int64 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *ToRollack) GetNext() int64 {
	if x != nil {
		return x.Next
	}
	return 0
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term     int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	NodeId   int64 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RxTotal  int64 `protobuf:"varint,3,opt,name=rx_total,json=rxTotal,proto3" json:"rx_total,omitempty"`
	RxMax    int64 `protobuf:"varint,4,opt,name=rx_max,json=rxMax,proto3" json:"rx_max,omitempty"`
	MemTotal int64 `protobuf:"varint,5,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_graft_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{14}
}

func (x *Vote) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Vote) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Vote) GetRxTotal() int64 {
	if x != nil {
		return x.RxTotal
	}
	return 0
}

func (x *Vote) GetRxMax() int64 {
	if x != nil {
		return x.RxMax
	}
	return 0
}

func (x *Vote) GetMemTotal() int64 {
	if x != nil {
		return x.MemTotal
	}
	return 0
}

type VoteAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteFor  *Vote `protobuf:"bytes,1,opt,name=vote_for,json=voteFor,proto3" json:"vote_for,omitempty"`
	NodeId   int64 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Term     int64 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	RxMax    int64 `protobuf:"varint,4,opt,name=rx_max,json=rxMax,proto3" json:"rx_max,omitempty"`
	RxTotal  int64 `protobuf:"varint,5,opt,name=rx_total,json=rxTotal,proto3" json:"rx_total,omitempty"`
	LogMax   int64 `protobuf:"varint,6,opt,name=log_max,json=logMax,proto3" json:"log_max,omitempty"`
	Granted  int32 `protobuf:"varint,7,opt,name=granted,proto3" json:"granted,omitempty"`
	MemMaxId int64 `protobuf:"varint,8,opt,name=mem_max_id,json=memMaxId,proto3" json:"mem_max_id,omitempty"`
}

func (x *VoteAck) Reset() {
	*x = VoteAck{}
	mi := &file_graft_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteAck) ProtoMessage() {}

func (x *VoteAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteAck.ProtoReflect.Descriptor instead.
func (*VoteAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{15}
}

func (x *VoteAck) GetVoteFor() *Vote {
	if x != nil {
		return x.VoteFor
	}
	return nil
}

func (x *VoteAck) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *VoteAck) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *VoteAck) GetRxMax() int64 {
	if x != nil {
		return x.RxMax
	}
	return 0
}

func (x *VoteAck) GetRxTotal() int64 {
	if x != nil {
		return x.RxTotal
	}
	return 0
}

func (x *VoteAck) GetLogMax() int64 {
	if x != nil {
		return x.LogMax
	}
	return 0
}

func (x *VoteAck) GetGranted() int32 {
	if x != nil {
		return x.Granted
	}
	return 0
}

func (x *VoteAck) GetMemMaxId() int64 {
	if x != nil {
		return x.MemMaxId
	}
	return 0
}

type Chap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *Chap) Reset() {
	*x = Chap{}
	mi := &file_graft_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chap) ProtoMessage() {}

func (x *Chap) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chap.ProtoReflect.Descriptor instead.
func (*Chap) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{16}
}

func (x *Chap) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_graft_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{17}
}

func (x *Auth) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Auth) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detect int32 `protobuf:"varint,1,opt,name=detect,proto3" json:"detect,omitempty"`
	Term   int64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_graft_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{18}
}

func (x *Ping) GetDetect() int32 {
	if x != nil {
		return x.Detect
	}
	return 0
}

func (x *Ping) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_graft_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{19}
}

func (x *Pong) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtype  int32    `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
	NodeId int64    `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Addr   string   `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Peers  []string `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	mi := &file_graft_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{20}
}

func (x *NodeInfo) GetRtype() int32 {
	if x != nil {
		return x.Rtype
	}
	return 0
}

func (x *NodeInfo) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NodeInfo) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Term   int64  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Cmd    []byte `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	mi := &file_graft_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{21}
}

func (x *Proxy) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Proxy) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Proxy) GetCmd() []byte {
	if x != nil {
		return x.Cmd
	}
	return nil
}

type ProxyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *ProxyAck) Reset() {
	*x = ProxyAck{}
	mi := &file_graft_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyAck) ProtoMessage() {}

func (x *ProxyAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyAck.ProtoReflect.Descriptor instead.
func (*ProxyAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{22}
}

func (x *ProxyAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProxyAck) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ProxyAck) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type ReadBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ptype   int32    `protobuf:"varint,1,opt,name=ptype,proto3" json:"ptype,omitempty"` //value  valueList mutliValue multiValueList
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Keys    [][]byte `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty"`
	Values  [][]byte `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	ErrCode int32    `protobuf:"varint,6,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (x *ReadBean) Reset() {
	*x = ReadBean{}
	mi := &file_graft_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBean) ProtoMessage() {}

func (x *ReadBean) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBean.ProtoReflect.Descriptor instead.
func (*ReadBean) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{23}
}

func (x *ReadBean) GetPtype() int32 {
	if x != nil {
		return x.Ptype
	}
	return 0
}

func (x *ReadBean) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReadBean) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReadBean) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ReadBean) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ReadBean) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type RxEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enstries []int64 `protobuf:"varint,1,rep,packed,name=enstries,proto3" json:"enstries,omitempty"`
	RxId     int64   `protobuf:"varint,2,opt,name=rxId,proto3" json:"rxId,omitempty"`
	RxIdMax  int64   `protobuf:"varint,3,opt,name=rxIdMax,proto3" json:"rxIdMax,omitempty"`
}

func (x *RxEntries) Reset() {
	*x = RxEntries{}
	mi := &file_graft_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RxEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxEntries) ProtoMessage() {}

func (x *RxEntries) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxEntries.ProtoReflect.Descriptor instead.
func (*RxEntries) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{24}
}

func (x *RxEntries) GetEnstries() []int64 {
	if x != nil {
		return x.Enstries
	}
	return nil
}

func (x *RxEntries) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

func (x *RxEntries) GetRxIdMax() int64 {
	if x != nil {
		return x.RxIdMax
	}
	return 0
}

type RxEntriesAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryMap map[int64]*SyncBean `protobuf:"bytes,1,rep,name=entry_map,json=entryMap,proto3" json:"entry_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bean     *SyncBean           `protobuf:"bytes,2,opt,name=bean,proto3" json:"bean,omitempty"`
	RxIdMax  int64               `protobuf:"varint,3,opt,name=rxId_max,json=rxIdMax,proto3" json:"rxId_max,omitempty"`
}

func (x *RxEntriesAck) Reset() {
	*x = RxEntriesAck{}
	mi := &file_graft_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RxEntriesAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxEntriesAck) ProtoMessage() {}

func (x *RxEntriesAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxEntriesAck.ProtoReflect.Descriptor instead.
func (*RxEntriesAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{25}
}

func (x *RxEntriesAck) GetEntryMap() map[int64]*SyncBean {
	if x != nil {
		return x.EntryMap
	}
	return nil
}

func (x *RxEntriesAck) GetBean() *SyncBean {
	if x != nil {
		return x.Bean
	}
	return nil
}

func (x *RxEntriesAck) GetRxIdMax() int64 {
	if x != nil {
		return x.RxIdMax
	}
	return 0
}

type SyncBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leb     *LogEntryBat `protobuf:"bytes,1,opt,name=leb,proto3" json:"leb,omitempty"`
	Mc      *MvccCell    `protobuf:"bytes,2,opt,name=mc,proto3" json:"mc,omitempty"`
	AckType int32        `protobuf:"varint,3,opt,name=ack_type,json=ackType,proto3" json:"ack_type,omitempty"`
}

func (x *SyncBean) Reset() {
	*x = SyncBean{}
	mi := &file_graft_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncBean) ProtoMessage() {}

func (x *SyncBean) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncBean.ProtoReflect.Descriptor instead.
func (*SyncBean) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{26}
}

func (x *SyncBean) GetLeb() *LogEntryBat {
	if x != nil {
		return x.Leb
	}
	return nil
}

func (x *SyncBean) GetMc() *MvccCell {
	if x != nil {
		return x.Mc
	}
	return nil
}

func (x *SyncBean) GetAckType() int32 {
	if x != nil {
		return x.AckType
	}
	return 0
}

type MvccBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beans []*MvccCell `protobuf:"bytes,1,rep,name=beans,proto3" json:"beans,omitempty"`
}

func (x *MvccBean) Reset() {
	*x = MvccBean{}
	mi := &file_graft_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MvccBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccBean) ProtoMessage() {}

func (x *MvccBean) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccBean.ProtoReflect.Descriptor instead.
func (*MvccBean) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{27}
}

func (x *MvccBean) GetBeans() []*MvccCell {
	if x != nil {
		return x.Beans
	}
	return nil
}

type MvccCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RxId  int64  `protobuf:"varint,3,opt,name=rx_id,json=rxId,proto3" json:"rx_id,omitempty"`
	PType int32  `protobuf:"varint,4,opt,name=p_type,json=pType,proto3" json:"p_type,omitempty"`
}

func (x *MvccCell) Reset() {
	*x = MvccCell{}
	mi := &file_graft_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MvccCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccCell) ProtoMessage() {}

func (x *MvccCell) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccCell.ProtoReflect.Descriptor instead.
func (*MvccCell) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{28}
}

func (x *MvccCell) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MvccCell) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MvccCell) GetRxId() int64 {
	if x != nil {
		return x.RxId
	}
	return 0
}

func (x *MvccCell) GetPType() int32 {
	if x != nil {
		return x.PType
	}
	return 0
}

type MemBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         uint64          `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       []byte          `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	PType       int32           `protobuf:"varint,3,opt,name=p_type,json=pType,proto3" json:"p_type,omitempty"`
	MemId       int64           `protobuf:"varint,4,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
	ExpiredTime uint64          `protobuf:"varint,5,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	Mvmap       map[string]bool `protobuf:"bytes,6,rep,name=mvmap,proto3" json:"mvmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MemBean) Reset() {
	*x = MemBean{}
	mi := &file_graft_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemBean) ProtoMessage() {}

func (x *MemBean) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemBean.ProtoReflect.Descriptor instead.
func (*MemBean) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{29}
}

func (x *MemBean) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *MemBean) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MemBean) GetPType() int32 {
	if x != nil {
		return x.PType
	}
	return 0
}

func (x *MemBean) GetMemId() int64 {
	if x != nil {
		return x.MemId
	}
	return 0
}

func (x *MemBean) GetExpiredTime() uint64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *MemBean) GetMvmap() map[string]bool {
	if x != nil {
		return x.Mvmap
	}
	return nil
}

type MemApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Term   int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Mb     *MemBean `protobuf:"bytes,3,opt,name=mb,proto3" json:"mb,omitempty"`
}

func (x *MemApply) Reset() {
	*x = MemApply{}
	mi := &file_graft_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemApply) ProtoMessage() {}

func (x *MemApply) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemApply.ProtoReflect.Descriptor instead.
func (*MemApply) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{30}
}

func (x *MemApply) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *MemApply) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *MemApply) GetMb() *MemBean {
	if x != nil {
		return x.Mb
	}
	return nil
}

type MemApplyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MemApplyAck) Reset() {
	*x = MemApplyAck{}
	mi := &file_graft_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemApplyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemApplyAck) ProtoMessage() {}

func (x *MemApplyAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemApplyAck.ProtoReflect.Descriptor instead.
func (*MemApplyAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{31}
}

func (x *MemApplyAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MemSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemId int64 `protobuf:"varint,1,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
}

func (x *MemSync) Reset() {
	*x = MemSync{}
	mi := &file_graft_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemSync) ProtoMessage() {}

func (x *MemSync) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemSync.ProtoReflect.Descriptor instead.
func (*MemSync) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{32}
}

func (x *MemSync) GetMemId() int64 {
	if x != nil {
		return x.MemId
	}
	return 0
}

type MemSyncAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mb *MemBean `protobuf:"bytes,1,opt,name=mb,proto3" json:"mb,omitempty"`
}

func (x *MemSyncAck) Reset() {
	*x = MemSyncAck{}
	mi := &file_graft_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemSyncAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemSyncAck) ProtoMessage() {}

func (x *MemSyncAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemSyncAck.ProtoReflect.Descriptor instead.
func (*MemSyncAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{33}
}

func (x *MemSyncAck) GetMb() *MemBean {
	if x != nil {
		return x.Mb
	}
	return nil
}

type MemProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	PType int32  `protobuf:"varint,3,opt,name=p_type,json=pType,proto3" json:"p_type,omitempty"`
	Ttl   uint64 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *MemProxy) Reset() {
	*x = MemProxy{}
	mi := &file_graft_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemProxy) ProtoMessage() {}

func (x *MemProxy) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemProxy.ProtoReflect.Descriptor instead.
func (*MemProxy) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{34}
}

func (x *MemProxy) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MemProxy) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MemProxy) GetPType() int32 {
	if x != nil {
		return x.PType
	}
	return 0
}

func (x *MemProxy) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MemProxyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MemProxyAck) Reset() {
	*x = MemProxyAck{}
	mi := &file_graft_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemProxyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemProxyAck) ProtoMessage() {}

func (x *MemProxyAck) ProtoReflect() protoreflect.Message {
	mi := &file_graft_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemProxyAck.ProtoReflect.Descriptor instead.
func (*MemProxyAck) Descriptor() ([]byte, []int) {
	return file_graft_proto_rawDescGZIP(), []int{35}
}

func (x *MemProxyAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_graft_proto protoreflect.FileDescriptor

var file_graft_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73,
	0x74, 0x75, 0x62, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x42, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x52, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x13,
	0x0a, 0x05, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x05,
	0x52, 0x78, 0x42, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x02, 0x6d, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x02, 0x6d, 0x63, 0x22, 0x77, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x63, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x63, 0x6e, 0x22,
	0x38, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x41, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x78, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x75, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x61, 0x74,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x73, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x75, 0x62,
	0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x61, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x78,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x0b, 0x52,
	0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x82, 0x01,
	0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x72, 0x78, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x78, 0x4d, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x32, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22,
	0x1e, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x63, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x58, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x52, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x78, 0x49, 0x64, 0x4d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x22,
	0xd9, 0x01, 0x0a, 0x0c, 0x52, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6b,
	0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x52, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x62, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x74, 0x75, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x04, 0x62,
	0x65, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x49, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0x4b,
	0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x65, 0x61, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x08, 0x53,
	0x79, 0x6e, 0x63, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x65, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x61, 0x74, 0x52, 0x03, 0x6c, 0x65, 0x62, 0x12, 0x1e, 0x0a, 0x02,
	0x6d, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e,
	0x4d, 0x76, 0x63, 0x63, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x02, 0x6d, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x08, 0x4d, 0x76, 0x63, 0x63, 0x42,
	0x65, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x62, 0x65, 0x61, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x4d, 0x76, 0x63,
	0x63, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x78,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x4d, 0x65,
	0x6d, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x6d, 0x76, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x74, 0x75, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x2e, 0x4d, 0x76, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x76, 0x6d, 0x61, 0x70, 0x1a, 0x38,
	0x0a, 0x0a, 0x4d, 0x76, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x1d, 0x0a, 0x02, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x74, 0x75, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x02, 0x6d, 0x62,
	0x22, 0x27, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x07, 0x4d, 0x65, 0x6d,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x02, 0x6d, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x75, 0x62, 0x2e, 0x4d, 0x65, 0x6d,
	0x42, 0x65, 0x61, 0x6e, 0x52, 0x02, 0x6d, 0x62, 0x22, 0x5b, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x27, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x2f, 0x73, 0x74, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_graft_proto_rawDescOnce sync.Once
	file_graft_proto_rawDescData = file_graft_proto_rawDesc
)

func file_graft_proto_rawDescGZIP() []byte {
	file_graft_proto_rawDescOnce.Do(func() {
		file_graft_proto_rawDescData = protoimpl.X.CompressGZIP(file_graft_proto_rawDescData)
	})
	return file_graft_proto_rawDescData
}

var file_graft_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_graft_proto_goTypes = []any{
	(*SnapshotBat)(nil),      // 0: stub.SnapshotBat
	(*LogEntryBat)(nil),      // 1: stub.LogEntryBat
	(*RxBat)(nil),            // 2: stub.RxBat
	(*HeartBeat)(nil),        // 3: stub.HeartBeat
	(*HeartBeatAck)(nil),     // 4: stub.HeartBeatAck
	(*ReqLogEntries)(nil),    // 5: stub.ReqLogEntries
	(*ReqLogEntriesAck)(nil), // 6: stub.ReqLogEntriesAck
	(*AppendEntries)(nil),    // 7: stub.AppendEntries
	(*AppendEntriesAck)(nil), // 8: stub.AppendEntriesAck
	(*Commit)(nil),           // 9: stub.Commit
	(*CommitAck)(nil),        // 10: stub.CommitAck
	(*RollBack)(nil),         // 11: stub.RollBack
	(*RollBackAck)(nil),      // 12: stub.RollBackAck
	(*ToRollack)(nil),        // 13: stub.ToRollack
	(*Vote)(nil),             // 14: stub.Vote
	(*VoteAck)(nil),          // 15: stub.VoteAck
	(*Chap)(nil),             // 16: stub.Chap
	(*Auth)(nil),             // 17: stub.Auth
	(*Ping)(nil),             // 18: stub.Ping
	(*Pong)(nil),             // 19: stub.Pong
	(*NodeInfo)(nil),         // 20: stub.NodeInfo
	(*Proxy)(nil),            // 21: stub.Proxy
	(*ProxyAck)(nil),         // 22: stub.ProxyAck
	(*ReadBean)(nil),         // 23: stub.ReadBean
	(*RxEntries)(nil),        // 24: stub.RxEntries
	(*RxEntriesAck)(nil),     // 25: stub.RxEntriesAck
	(*SyncBean)(nil),         // 26: stub.SyncBean
	(*MvccBean)(nil),         // 27: stub.MvccBean
	(*MvccCell)(nil),         // 28: stub.MvccCell
	(*MemBean)(nil),          // 29: stub.MemBean
	(*MemApply)(nil),         // 30: stub.MemApply
	(*MemApplyAck)(nil),      // 31: stub.MemApplyAck
	(*MemSync)(nil),          // 32: stub.MemSync
	(*MemSyncAck)(nil),       // 33: stub.MemSyncAck
	(*MemProxy)(nil),         // 34: stub.MemProxy
	(*MemProxyAck)(nil),      // 35: stub.MemProxyAck
	nil,                      // 36: stub.RxEntriesAck.EntryMapEntry
	nil,                      // 37: stub.MemBean.MvmapEntry
}
var file_graft_proto_depIdxs = []int32{
	28, // 0: stub.RxBat.mc:type_name -> stub.MvccCell
	1,  // 1: stub.ReqLogEntriesAck.entries:type_name -> stub.LogEntryBat
	1,  // 2: stub.AppendEntries.enstries:type_name -> stub.LogEntryBat
	14, // 3: stub.VoteAck.vote_for:type_name -> stub.Vote
	36, // 4: stub.RxEntriesAck.entry_map:type_name -> stub.RxEntriesAck.EntryMapEntry
	26, // 5: stub.RxEntriesAck.bean:type_name -> stub.SyncBean
	1,  // 6: stub.SyncBean.leb:type_name -> stub.LogEntryBat
	28, // 7: stub.SyncBean.mc:type_name -> stub.MvccCell
	28, // 8: stub.MvccBean.beans:type_name -> stub.MvccCell
	37, // 9: stub.MemBean.mvmap:type_name -> stub.MemBean.MvmapEntry
	29, // 10: stub.MemApply.mb:type_name -> stub.MemBean
	29, // 11: stub.MemSyncAck.mb:type_name -> stub.MemBean
	26, // 12: stub.RxEntriesAck.EntryMapEntry.value:type_name -> stub.SyncBean
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_graft_proto_init() }
func file_graft_proto_init() {
	if File_graft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_graft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_graft_proto_goTypes,
		DependencyIndexes: file_graft_proto_depIdxs,
		MessageInfos:      file_graft_proto_msgTypes,
	}.Build()
	File_graft_proto = out.File
	file_graft_proto_rawDesc = nil
	file_graft_proto_goTypes = nil
	file_graft_proto_depIdxs = nil
}
